from aiogram.types import ReplyKeyboardMarkup, WebAppInfo, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardButton, InlineKeyboardBuilder

from app.api.models import Application
from app.config import settings


def admin_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –≤—Å–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º.
    """
    url_applications_admin = f'{settings.BASE_SITE}/admin?worker_id={user_id}'
    url_worker_items = f'{settings.BASE_SITE}/worker/worker_list?worker_id={user_id}'
    kb = InlineKeyboardBuilder()
    kb.button(text='üìù –°–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏', web_app=WebAppInfo(url=url_applications_admin))
    kb.button(text='üí± –°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏', web_app=WebAppInfo(url=url_worker_items))
    if user_id in settings.ADMIN_IDS:
        kb.button(text='‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data='send_all')
        kb.button(text='‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º', callback_data='send_roles')
    kb.button(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='statistic')
    kb.button(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_home')
    kb.adjust(2, 2, 2)
    return kb.as_markup()


def send_message_keyboard(target: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text='üìÑ –¢–µ–∫—Å—Ç', callback_data=f'send_text_{target}')
    kb.button(text='üé• –í–∏–¥–µ–æ', callback_data=f'send_video_{target}')
    kb.button(text='üéµ –ê—É–¥–∏–æ', callback_data=f'send_audio_{target}')
    kb.button(text='üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data=f'send_image_{target}')
    kb.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
    kb.adjust(2)
    return kb.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
def update_status_apl_keyboard(application_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    for status in Application.StatusEnum:
        keyboard.add(InlineKeyboardButton(
            text=status.value,
            callback_data=f'status_{application_id}_{status.value}'
        ))
    return keyboard