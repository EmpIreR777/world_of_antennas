import asyncio
import re
import logging
from typing import List, Union
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from sqlalchemy import and_, select

from app.api.dao import ApplicationDAO, ShopDAO, UserDAO
from app.api.models import User
from app.bot.utils.utils import (
    check_user_availability, format_statistics_message, get_hello_admins_text, send_message_with_delay)
from app.database import async_session_maker
from app.bot.keyboards.kbs_user import main_keyboard
from app.bot.keyboards.kbs_admin import admin_keyboard, send_message_keyboard
from app.config import settings


router = Router()


@router.callback_query(F.data == 'üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', F.from_user.id.in_(settings.ADMIN_IDS))
@router.message(F.text == 'üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', F.from_user.id.in_(settings.ADMIN_IDS))
async def admin_panel(event: Union[Message, CallbackQuery]):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' callback_query –∏ message.
    """
    if isinstance(event, CallbackQuery):
        call = event
        await send_message_with_delay(message=call.message)
        await call.answer(text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥', show_alert=False)
        await call.message.delete() # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ TODO
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞
        await call.message.answer(
            text=get_hello_admins_text(user_full_name=call.from_user.full_name),
            reply_markup=admin_keyboard(user_id=call.from_user.id)
        )
    else:
        message = event
        await message.delete() # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ TODO
        await send_message_with_delay(message=message)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞
        await message.answer(
            text=get_hello_admins_text(user_full_name=message.from_user.full_name),
            reply_markup=admin_keyboard(user_id=message.from_user.id)
        )


@router.callback_query(F.data == 'statistic', F.from_user.id.in_(settings.ADMIN_IDS))
async def admin_statistic(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    –°–æ–±–∏—Ä–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∑–∞—è–≤–∫–∞–º.
    """
    try:
        await call.answer('üìä –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        async with async_session_maker() as session:
            stats_people = await UserDAO.get_statistics(session=session)
            stats_app = await ApplicationDAO.get_statistics_applications(session=session)
            shop_app_counts =  await ShopDAO.get_shop_count_app(session=session)
            users = await UserDAO.find_all() # TODO —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ —Å–µ—Å—Å–∏–∏ –≥–¥–µ –ª—É—á—à–µ

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∞—Ç—á–∞–º–∏
        telegram_ids = [user.telegram_id for user in users]
        batch_size = 25
        alive_users = 0
        
        for i in range(0, len(telegram_ids), batch_size):
            batch = telegram_ids[i:i + batch_size]
            check_tasks = [
                check_user_availability(call.message.bot, telegram_id)
                for telegram_id in batch
            ]
            results = await asyncio.gather(*check_tasks, return_exceptions=True)
            alive_users += sum(1 for result in results if isinstance(result, bool) and result)

        not_alive_users = stats_people['total_users'] - alive_users
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = format_statistics_message(
            stats_people, 
            stats_app, 
            alive_users, 
            not_alive_users,
            shop_app_counts
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        await send_message_with_delay(message=call.message)
        await call.message.edit_text(
            text=stats_message,
            reply_markup=admin_keyboard(user_id=call.from_user.id)
        )
    except Exception as e:
        error_msg = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}'
        logging.error(error_msg, exc_info=True)
        await call.message.answer(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )


@router.callback_query(F.data == 'back_home', F.from_user.id.in_(settings.ADMIN_IDS))
async def cmd_back_home_admin(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ù–∞ –≥–ª–∞–≤–Ω—É—é.
    """
    await send_message_with_delay(message=call.message)
    await call.answer(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {call.from_user.full_name}!')
    await call.message.answer(
        f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{call.from_user.full_name}</b>!\n\n'
        '–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π. '
        '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, '
        '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º.\n\n'
        '–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?',
        reply_markup=main_keyboard(user_id=call.from_user.id,
                                first_name=call.from_user.first_name)
    )

# <---------------------------------------start_send_media----------------------------------------->


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class SendMessage(StatesGroup):
    target = State()  # 'all' –∏–ª–∏ 'roles'
    media_type = State()  # 'text', 'video', 'audio', 'image'
    waiting_for_content = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏
@router.callback_query(
    F.data.in_(['send_all', 'send_roles']),
    F.from_user.id.in_(settings.ADMIN_IDS)
)
async def handle_admin_keyboard_callbacks(callback: CallbackQuery, state: FSMContext):
    data = callback.data
    target = 'all' if data == 'send_all' else 'roles'
    await send_message_with_delay(message=callback.message)
    await callback.message.edit_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ :',
        reply_markup=send_message_keyboard(target)
    )
    await state.update_data(target=target)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@router.callback_query(
    F.data.regexp(r'^send_(text|video|audio|image)_(all|roles)$'),
    F.from_user.id.in_(settings.ADMIN_IDS)
)
async def handle_media_type_selection(callback: CallbackQuery, state: FSMContext):
    match = re.match(r'^send_(text|video|audio|image)_(all|roles)$', callback.data)
    await send_message_with_delay(message=callback.message)
    if not match:
        await callback.answer('‚ùóÔ∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        return
    media_type, target = match.groups()
    await state.update_data(media_type=media_type, target=target)

    prompts = {
        'text': 'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.',
        'video': 'üé• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.',
        'audio': 'üéµ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.',
        'image': 'üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.'
    }
    await callback.message.answer(prompts.get(media_type, 'üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'))
    await state.set_state(SendMessage.waiting_for_content)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.message(
    StateFilter(SendMessage.waiting_for_content),
    F.from_user.id.in_(settings.ADMIN_IDS)
)
async def handle_send_message(message: Message, state: FSMContext):
    data = await state.get_data()
    media_type = data.get('media_type')
    target = data.get('target')
    
    async with async_session_maker() as session:
        if target == 'all':
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é USER
            stmt = select(User).where(User.role == User.RoleEnum.USER)
        else:  # target == 'roles'
            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö, –∫—Ä–æ–º–µ USER –∏ SUPERUSER
            stmt = select(User).where(
                and_(
                    User.role != User.RoleEnum.USER,
                    User.role != User.RoleEnum.SUPERUSER
                )
            )
        result = await session.execute(stmt)
        users = result.scalars().all()

    failed_users = []
    content = None
    caption = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if media_type == 'text':
        if message.text:
            content = message.text
        else:
            await message.answer('‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            return  # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥
    elif media_type == 'video':
        if message.video:
            content = message.video.file_id
        else:
            await message.answer('‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.')
            return
    elif media_type == 'audio':
        if message.audio:
            content = message.audio.file_id
        else:
            await message.answer('‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ.')
            return
    elif media_type == 'image':
        if message.photo:
            content = message.photo[-1].file_id
            caption = message.caption or ""
        else:
            await message.answer('‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
            return
    else:
        await message.answer('‚ùóÔ∏è–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    semaphore = asyncio.Semaphore(20)  # –ú–∞–∫—Å–∏–º—É–º 20 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    async def send_content(user):
        async with semaphore:
            try:
                if media_type == 'text':
                    await send_message_with_delay(message=message)
                    await message.bot.send_message(chat_id=user.telegram_id, text=content)
                elif media_type == 'video':
                    await send_message_with_delay(message=message, action='upload_video')
                    await message.bot.send_video(chat_id=user.telegram_id, video=content)
                elif media_type == 'audio':
                    await send_message_with_delay(message=message, action='upload_audio')
                    await message.bot.send_audio(chat_id=user.telegram_id, audio=content)
                elif media_type == 'image':
                    await send_message_with_delay(message=message, action='upload_photo')
                    await message.bot.send_photo(chat_id=user.telegram_id, photo=content, caption=caption)
            except Exception as e:
                logging.error(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}')
                failed_users.append(f'<b>–¢–µ–ª–µ–≥—Ä–∞–º ID:</b> {user.telegram_id}, <b>–ò–º—è:</b> {user.username}')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    tasks = [asyncio.create_task(send_content(user)) for user in users]

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ gather —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    await asyncio.gather(*tasks, return_exceptions=True)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    user_or_role = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' if target == "all" else '—Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º'
    if failed_users:
        response = (
            f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º {user_or_role}, –∫—Ä–æ–º–µ:\n' +
            f'\n'.join(failed_users)
        )
    else:
        response = f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º {user_or_role}.'
    
    await message.answer(
        response, reply_markup=admin_keyboard(user_id=message.from_user.id))
    await state.clear()

# <-----------------------------------end_send_media------------------------------------>
