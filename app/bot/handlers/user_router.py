import logging
from typing import Union
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile

from app.api.dao import UserDAO, ShopDAO
from app.config import settings
from app.bot.keyboards.kbs_user import app_keyboard, home_user_keyboard, main_keyboard
from app.bot.utils.utils import get_back_home_user_text, get_compliments, greet_user, get_about_us_text, send_message_with_delay

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    """
    logging.info(f'–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é telegram_id: {message.from_user.id}')
    user = await UserDAO.find_one_or_none(telegram_id=message.from_user.id)
    try:
        if not user:
            await UserDAO.add(
                telegram_id=message.from_user.id,
                first_name=message.from_user.first_name,
                username=message.from_user.username
            )
    except Exception as e:
       logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}')
    await send_message_with_delay(message=message)
    await greet_user(message=message, is_new_user=not user)


@router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def cmd_back_home(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'.
    """
    await send_message_with_delay(message=message)
    await greet_user(message=message, is_new_user=False)


@router.callback_query(F.data == 'back_about_us')
@router.message(F.text == '‚ÑπÔ∏è –û –Ω–∞—Å')
async def about_us(event: Union[Message, CallbackQuery]):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'.
    """
    if isinstance(event, CallbackQuery):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
        await event.answer(text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥')
        await send_message_with_delay(message=event.message)
        await event.message.answer(
            text=get_about_us_text(),
            reply_markup=app_keyboard()
        )
    else:
        await send_message_with_delay(message=event)
        await event.answer(
            text=get_about_us_text(),
            reply_markup=app_keyboard()
        )


@router.callback_query(F.data.in_(['–ë–∏–π—Å–∫ –í–∞—Å–∏–ª—å–µ–≤–∞ 75', '–ì–æ—Ä–Ω—ã–π –ê–ª—Ç–∞–π—Å–∫–∞—è —É–ª–∏—Ü–∞, 26–ë']))
async def process_shop_selection(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö '–ú–ò–† –ê–ù–¢–ï–ù–ù'.
    """
    shop_id = 1 if call.data == '–ë–∏–π—Å–∫ –í–∞—Å–∏–ª—å–µ–≤–∞ 75' else 2

    shop = await ShopDAO.find_one_or_none_by_id(shop_id=shop_id)
    if shop:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É Google
        google_maps_link = f"https://www.google.com/maps/search/?api=1&query={shop.latitude},{shop.longitude}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        shop_info = (
            f'(ÔπôÀì üì∂ ÀíÔπö) <a href="https://mir-ant.ru/">–ú–ò–† –ê–ù–¢–ï–ù–ù</a> (ÔπôÀì üì∂ ÀíÔπö)\n'
            f"üè™ <b>–ê–¥—Ä–µ—Å:</b> {shop.address_name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {shop.phone}\n"
            f"‚è∞ <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> {shop.working_hours}\n"
            f"üó∫ <a href='{google_maps_link}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –º–∞–≥–∞–∑–∏–Ω–∞
        if shop.photo:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo_path = settings.STORAGE_IMAGES / shop.photo

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await call.message.answer_photo(
                photo=FSInputFile(photo_path),  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
                caption=shop_info,              # –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
                reply_markup=home_user_keyboard(),
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await call.message.edit_text(
                text=shop_info,
                reply_markup=home_user_keyboard(),
                parse_mode="HTML"
            )
    else:
        await call.message.edit_text(
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=home_user_keyboard()
        )

    await call.answer()


@router.callback_query(F.data == 'user_back_home')
async def cmd_back_home_user(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞ –≥–ª–∞–≤–Ω—É—é'.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–û –Ω–∞—Å" –∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    await call.answer(f'{await get_compliments()} \n {call.from_user.full_name}üë§')
    await send_message_with_delay(message=call.message)
    await call.message.delete() # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏–º TODO
    await call.message.answer(
        get_back_home_user_text(call.from_user.full_name),
        reply_markup=main_keyboard(user_id=call.from_user.id,
                                first_name=call.from_user.first_name)
    )